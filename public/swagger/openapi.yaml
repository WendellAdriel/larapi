openapi: 3.0.0
info:
  title: LarAPI
  version: '1.0'
paths:
  /:
    get:
      tags:
        - 'Health Check'
      summary: 'Health check route'
      description: 'Returns the application name, environment and status of the API'
      responses:
        '200':
          description: 'API info'
          content:
            application/json:
              schema:
                properties:
                  data: { properties: { application: { type: string }, environment: { type: string }, status: { type: integer } }, type: object }
                type: object
  /v1/auth/login:
    post:
      tags:
        - Auth
      summary: 'Gets a JWT via given credentials'
      description: 'Logs in a user and gets the JWT token'
      operationId: 34d0b1a967eb330a2bbd525c81a39e09
      requestBody:
        description: 'User credentials'
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                password:
                  type: string
              type: object
      responses:
        '200':
          description: 'The JWT Token'
          content:
            application/json:
              schema:
                properties:
                  access_token: { description: 'The JWT Token', type: string }
                  token_type: { description: 'The Token type', type: string }
                  expires_in: { description: 'The value in seconds for the token to expire', type: integer }
                type: object
        '401':
          description: Unauthorized
  /v1/auth/logout:
    post:
      tags:
        - Auth
      summary: 'Invalidates the token'
      description: 'Logs out a user and invalidates the JWT token'
      operationId: d0d7d8d2137a2c33c9c669ea1a811f65
      responses:
        '200':
          description: 'Logout message'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                type: object
        '401':
          description: Unauthorized
      security:
        jwt: {  }
  /v1/auth/refresh:
    post:
      tags:
        - Auth
      summary: 'Refreshes a token'
      description: 'Refresh the JWT Token, invalidating the old one and generating a new one'
      operationId: 77dd359a393b3d4fc328bd2b78c35153
      responses:
        '200':
          description: 'The new JWT Token'
          content:
            application/json:
              schema:
                properties:
                  access_token: { description: 'The JWT Token', type: string }
                  token_type: { description: 'The Token type', type: string }
                  expires_in: { description: 'The value in seconds for the token to expire', type: integer }
                type: object
        '401':
          description: Unauthorized
      security:
        jwt: {  }
  /v1/auth/me:
    get:
      tags:
        - 'Logged User Info'
      summary: 'Gets the authenticated user'
      description: 'Gets the logged User'
      operationId: b5e78dc6c5e7de4ffe51ec1b4a19153b
      responses:
        '200':
          description: 'The logged user info'
          content:
            application/json:
              schema:
                properties:
                  user: { properties: { id: { type: integer }, uuid: { type: string }, name: { type: string }, email: { type: string }, active: { type: boolean }, role_id: { type: integer }, settings: { type: object }, last_login: { type: string }, created_at: { type: string }, updated_at: { type: string }, is_admin: { type: boolean }, is_manager: { type: boolean }, is_user: { type: boolean }, is_viewer: { type: boolean }, role_label: { type: string }, role: { properties: { id: { type: integer }, name: { type: string }, created_at: { type: string }, updated_at: { type: string } }, type: object } }, type: object }
                type: object
        '401':
          description: Unauthorized
      security:
        jwt: {  }
  /v1/auth/me/roles:
    get:
      tags:
        - 'Logged User Info'
      summary: 'Gets the authenticated user allowed roles'
      description: 'Gets the logged User allowed roles'
      operationId: fb387edeacbb76c9719ca8e454784995
      responses:
        '200':
          description: 'The logged user allowed roles'
          content:
            application/json:
              schema:
                type: array
                items:
                  properties: { id: { type: integer }, name: { type: string }, created_at: { type: string }, updated_at: { type: string } }
                  type: object
        '401':
          description: Unauthorized
      security:
        jwt: {  }
  /v1/users:
    get:
      tags:
        - 'Users Management'
      summary: 'Gets the list of users'
      description: 'Gets the list of users'
      operationId: 5645cb972ce7339b915a65f7d7c09dde
      parameters:
        -
          name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
        -
          name: per_page
          in: query
          required: false
          schema:
            type: integer
            default: 20
        -
          name: sort
          in: query
          required: false
          schema:
            properties:
              field:
                description: 'Field name to use in sort'
                type: string
              order:
                description: 'Order: ''asc'' or ''desc'''
                type: string
            type: object
        -
          name: search
          in: query
          description: 'Term to search'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'The list of users'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { properties: { id: { type: integer }, uuid: { type: string }, name: { type: string }, email: { type: string }, active: { type: boolean }, role_id: { type: integer }, settings: { type: object }, last_login: { type: string }, created_at: { type: string }, updated_at: { type: string }, is_admin: { type: boolean }, is_manager: { type: boolean }, is_user: { type: boolean }, is_viewer: { type: boolean }, role_label: { type: string }, role: { properties: { id: { type: integer }, name: { type: string }, created_at: { type: string }, updated_at: { type: string } }, type: object } }, type: object } }
                  pagination: { properties: { page_count: { type: integer }, total: { description: 'The filtered total count', type: integer }, total_all: { description: 'The unfiltered total count', type: integer } }, type: object }
                type: object
        '400':
          description: 'Invalid Request'
        '401':
          description: Unauthorized
        '403':
          description: 'Access Denied'
        '404':
          description: 'Resource not found'
      security:
        jwt: {  }
    post:
      tags:
        - 'Users Management'
      summary: 'Creates a new user'
      description: 'Creates a new user'
      operationId: af74cf6a83b5fd3f8504dfab32c67fcb
      requestBody:
        description: 'Info needed to create a new user'
        content:
          application/json:
            schema:
              required:
                - name
                - email
                - password
                - password_confirmation
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  description: 'Must contain at least one lowercase letter, one uppercase letter, one number and one special character'
                  type: string
                password_confirmation:
                  type: string
                active:
                  type: boolean
                  default: true
                role_id:
                  type: integer
                  default: 3
              type: object
      responses:
        '201':
          description: 'The success response'
          content:
            application/json:
              schema:
                properties:
                  success: { type: boolean }
                type: object
        '400':
          description: 'Invalid Request'
        '401':
          description: Unauthorized
        '403':
          description: 'Access Denied'
        '422':
          description: 'Data is invalid'
      security:
        jwt: {  }
  '/v1/users/{uuid}':
    get:
      tags:
        - 'Users Management'
      summary: 'Gets the info of a specific user'
      description: 'Gets the info of a specific user'
      operationId: 03eb3f42821714d8aec3558719009b42
      parameters:
        -
          name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'The user info'
          content:
            application/json:
              schema:
                properties:
                  id: { type: integer }
                  uuid: { type: string }
                  name: { type: string }
                  email: { type: string }
                  active: { type: boolean }
                  role_id: { type: integer }
                  settings: { type: object }
                  last_login: { type: string }
                  created_at: { type: string }
                  updated_at: { type: string }
                  is_admin: { type: boolean }
                  is_manager: { type: boolean }
                  is_user: { type: boolean }
                  is_viewer: { type: boolean }
                  role_label: { type: string }
                  role: { properties: { id: { type: integer }, name: { type: string }, created_at: { type: string }, updated_at: { type: string } }, type: object }
                type: object
        '400':
          description: 'Invalid Request'
        '401':
          description: Unauthorized
        '403':
          description: 'Access Denied'
        '404':
          description: 'Resource not found'
      security:
        jwt: {  }
    put:
      tags:
        - 'Users Management'
      summary: 'Updates the info of a specific user'
      description: 'Updates the info of a specific user'
      operationId: 5caf79b05a6aa475e8e2939066866b05
      requestBody:
        description: 'Info needed to update the user info'
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                password:
                  description: 'Must contain at least one lowercase letter, one uppercase letter, one number and one special character'
                  type: string
                password_confirmation:
                  type: string
                active:
                  type: boolean
                role_id:
                  type: integer
              type: object
      responses:
        '200':
          description: 'The success response'
          content:
            application/json:
              schema:
                properties:
                  success: { type: boolean }
                type: object
        '400':
          description: 'Invalid Request'
        '401':
          description: Unauthorized
        '403':
          description: 'Access Denied'
        '422':
          description: 'Data is invalid'
      security:
        jwt: {  }
    delete:
      tags:
        - 'Users Management'
      summary: 'Deletes a specific user'
      description: 'Deletes a specific user'
      operationId: 1a55ef8162ba4820b0cd5bff160f79f0
      parameters:
        -
          name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'The success response'
          content:
            application/json:
              schema:
                properties:
                  success: { type: boolean }
                type: object
        '400':
          description: 'Invalid Request'
        '401':
          description: Unauthorized
        '403':
          description: 'Access Denied'
        '404':
          description: 'Resource not found'
      security:
        jwt: {  }
components:
  securitySchemes:
    jwt:
      type: http
      name: jwt
      in: header
      bearerFormat: JWT
      scheme: bearer
